version: "3"

name: siwa

services:
  siwa:
    build:
      context: .
    container_name: siwa
    image: siwa
    ports:
      - "81:16556"
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
  # prometheus:
  #   container_name: prometheus-svc
  #   image: prom/prometheus
  #   ports:
  #     - "9091:9090"
  #   command: --config.file=/etc/prometheus/prometheus.yml
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  loki:
    image: grafana/loki:2.6.1
    ports:
      - "3100"
    volumes:
      # directory must be created first, with uid:gid 10001:10001
      - ./volumes/loki:/loki
  promtail:
    image: grafana/promtail:2.6.1
    volumes:
      # custom config will read logs from the containers of
      # this project
      - ./loki/promtail-config.yml:/etc/promtail/config.yml
      # to read container labels and logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # - GF_SMTP_ENABLED=true
      # - GF_SMTP_HOST=smtp.gmail.com:465
      # - GF_SMTP_USER=email@mail.com
      # - GF_SMTP_PASSWORD=password
      # - GF_SMTP_FROM_ADDRESS=email@mail.com
      # - GF_SMTP_FROM_NAME=Grafana
      # - GF_SMTP_SKIP_VERIFY=true
  grafana-dashboards:
    image: arm64v8/alpine
    depends_on:
      - grafana
    volumes:
      - ./grafana-data:/grafana
    command: >
      /bin/sh -c "
        apk add --no-cache curl
        echo 'waiting for grafana'
        sleep 5s
        cd /grafana
        # curl --request POST http://grafana:3000/api/datasources --header 'Content-Type: application/json' -d @datasources/prometheus.json
        curl --request POST http://grafana:3000/api/datasources --header 'Content-Type: application/json' -d @datasources/loki.json
        # curl --request POST http://grafana:3000/api/dashboards/db --header 'Content-Type: application/json' -d @dashboard.json"
        # curl --request POST http://grafana:3000/api/v1/provisioning/alert-rules --header 'Content-Type: application/json' -d @alert-rules/siwa-error.json
